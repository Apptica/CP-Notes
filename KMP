#KMP Algorithm description and better understanding tips ----->Actually why and How KMP Algorithm works
#Assume indexing is done from 1 to n for a string of size n
First of all we construct an LCP array also known as fail array.

LCP[i] = length of proper suffix that matches a proper prefix in the string of length 1 to i

      a b c a a b c b a
A[i]  0 0 0 1 0 2 3 0 1

The concept of constructing this array is - >
i = 1 string is "a" so there is no proper prefix or suffix
i = 2 string is "ab" so there is one proper prefix "a" and only one proper suffix "b" but there is no matching so length is 0
i = 3 string is "abc" so there are two prefixes "a","ab" and two suffixes "bc","c" but no matching so again 0

SO similarily for all i we have the answer in a array A[].
Now why and how this array will help is listed below ----->

Think that you were matching a string with very large string. 
Larger String (Haystack) a b c d a a b c d a a b c a
Smaller String (Needle)  a a b c a

If i start matching then --->
a b c d a a b c d a a b c a
        | | | | x
        a a b c a
Since no match of 'a' with 'd' so now apply your brain and think from which character you need to match the string again.
So to do that check how much you can successfully shift the string and that you will get is " 0 " which shows that shift the
pattern completely which means that start matching the character d with a[f[i-1]]th character which is "zeroth" charcter.
Do a rough work on paper and you will surely understand what is going on.
Now there is an O(n) implementation to generate the helping array A[]

//the algo goes here

a[0] = 0;
a[1] = 0;
for i = 2 to n-1
      if(pattern[i] == pattern[a[i-1]])//if a[i-1] is 0 it means that we will compare it with 0th character
            {
                  a[i] = a[i-1] + 1;
            }
      else
                  a[i] = 0;
                  
//Now the time comes to uilise the a[] array
